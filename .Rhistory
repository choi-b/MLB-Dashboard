shiny::runApp('MLB_Stats')
read.csv('/Data/AllstarFull')
getwd()
read.csv("\Data/AllstarFull")
getwd()
mypath <- getwd()
read.csv("/Data/AllstarFull.csv")
drop(mypath)
rm(mypath)
read.csv("./Data/AllstarFull.csv")
read.csv("./Data/People.csv")
#See sample data
#read.csv("./Data/AllstarFull.csv")
read.csv("./Data/AllstarFull.csv")
#See sample data
#read.csv("./Data/AllstarFull.csv") #ALL STARs
read.csv("./Data/Batting.csv") #Batting
#See sample data
#read.csv("./Data/AllstarFull.csv") #ALL STARs
read.csv("./Data/Batting.csv") #Batting
read.csv("./Data/BattingPost.csv")
read.csv("./Data/Pitching.csv")
read.csv("./Data/Salaries.csv")
library(sqldf)
library(ggplot2)
#See sample data
#read.csv("./Data/AllstarFull.csv") #ALL STARs
#read.csv("./Data/Batting.csv") #Batting stats
#read.csv("./Data/BattingPost.csv") #Postseason Batting (has rounds as well)
read.csv("./Data/Fielding.csv")
getwd()
df_as <- read.csv("./Data/AllstarFull.csv") #All Stars
head(df_as)
df_bat <- read.csv("./Data/Batting.csv") #batting (reg season)
df_postbat <- read.csv("./Data/BattingPost.csv") #batting (postseason)
df_field <- read.csv("./Data/Fielding.csv") #fielding
df_pitch <- read.csv("./Data/Pitching.csv") #pitching
df_sal <- read.csv("./Data/Salaries.csv") #salaries
#Take a look at key columns
col(df_as)
#Take a look at key columns
names(df_as)
names(df_bat) #
names(df_postbat)
names(df_field)
names(df_pitch)
names(df_sal)
df_people <- read.csv("./Data/People.csv") #people
names(df_people)
names(df_sal) #
names(df_pitch)
#Take a look at some important columns
names(df_as) #playerID
names(df_field)
names(df_sal) #playerID, yearID, salary
head(df_as)
df_as %>%
yearID %>%
summarise()
library(dplyr)
library(sqldf)
library(ggplot2)
df_as %>%
yearID %>%
summarise()
df_as %>%
summarise(yearID)
head(df_as)
summarize(df_as$yearID)
summarisee(df_as$yearID)
summarise(df_as$yearID)
str(df_as$yearID)
summary(df_as$yearID)
df_as %>% filter(yearID >= 2010)
str(df_as)
df_as %>% filter(yearID >= 2010)
df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
#Let's only look at the last decade
df_as_2010 ->
df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
#Let's only look at the last decade
df_as_2010 ->
df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
#Let's only look at the last decade
df_as_2010 -> df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
## All Star Dataset ## -> probably won't use this data too much yet.
head(df_as)
#Let's only look at the last decade
df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
df_as_decade <-
df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
df_as_decade <- df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
af_as_decade <- df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
df_as_decade <- df_as %>%
filter(yearID >= 2010) %>%
select(playerID, yearID, teamID, lgID, startingPos)
rm(af_as_decade)
## Batting Dataset ##
head(df_bat)
str(df_bat)
summary(df_bat$yearID)
df_bat %>% filter(yearID = 2020)
df_bat %>% filter(yearID == 2020)
## Batting Dataset ##
head(df_bat)
names(df_bat)
df_bat %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, G, AB, R, H, X2B, X3B, HR, RBI, SB, BB, SO, HBP, GIDP)
## Batting Dataset ##
head(df_bat)
df_bat_decade <- df_bat %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, G, AB, R, H, X2B, X3B, HR, RBI, SB, BB, SO, HBP, GIDP)
## BattingPost Dataset ##
head(df_postbat)
summary(df_postbat$yearID)
df_postbat_decade <- df_postbat %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, G, AB, R, H, X2B, X3B, HR, RBI, SB, BB, SO, HBP, GIDP)
head(df_postbat_decade)
## Batting Dataset ##
head(df_bat)
## BattingPost Dataset ##
head(df_postbat)
df_postbat_decade <- df_postbat %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, round, teamID, lgID, G, AB, R, H, X2B, X3B, HR, RBI, SB, BB, SO, HBP, GIDP)
head(df_postbat_decade)
head(df_postbat_decade)
## BattingPost Dataset ##
head(df_postbat)
## Fielding Dataset ##
head(df_field)
summary(df_postbat$yearID)
summary(df_field$yearID)
df_field_decade <- df_field %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playedID, yearID, teamID, lgID, POS, G, GS, InnOuts, PO, A, E, DP)
df_field_decade <- df_field %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, POS, G, GS, InnOuts, PO, A, E, DP)
## Pitching Dataset ##
head(df_pitch)
## Pitching Dataset ##
head(df_pitch)
summary(df_pitch$yearID)
## Pitching Dataset ##
head(df_pitch)
summary(df_pitch$yearID) #1871 to 2020
df_pitch_decade <- df_pitch %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, W, L, G, GS, CG, SHO, SV, IPouts, H, ER, HR, BB, SO, ERA, HBP, GIDP)
head(df_pitch_decade)
## Pitching Dataset ##
head(df_pitch)
## Pitching Dataset ##
head(df_pitch)
df_pitch_decade <- df_pitch %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, W, L, G, GS, CG, SHO, SV, IPouts,
H, ER, HR, BB, SO, ERA, HBP, BK, BFP, R, SH, SF, GIDP)
head(df_pitch_decade)
## Salary Dataset ##
head(df_sal)
summary(df_sal$yearID)
## Salary Dataset ##
head(df_sal)
summary(df_sal$yearID) #only from 1985 to 2016
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
str(df_bat_decade)
#Since there is no 'AVG' column, need to divide H by AB
names(df_bat_decade)
df_bat_decade %>% rename(X2B = '2B', X3B = '3B')
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#Since there is no 'AVG' column, need to divide H by AB
df_bat_decade$AVG = df_bat_decade$H/df_bat_decade$AB
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#check out the null values
is.na(df_bat_decade)
#check out the null values
na(df_bat_decade)
#check out the null values
is.na(df_bat_decade$AVG)
#check out the null values
df_bat_decade %>% filter(is.na(AVG))
df_bat_decade <- df_bat_decade %>% filter(!is.na(AVG))
head(df_bat_decade)
## Batting Dataset ##
head(df_bat)
head(df_bat_decade)
#With standard season of 162 games, players need 502 plate appearances to qualify for the batting title
summary(df_bat_decade$AB)
summary(df_bat_decade$G)
## Batting Dataset ##
head(df_bat)
## BattingPost Dataset ##
head(df_postbat) #postseason batting stats are separated by each round
## Batting Dataset ##
head(df_bat)
str(df_bat)
summary(df_bat$yearID) #min 1871, max 2020. 2020...?
df_bat %>% filter(yearID == 2020) #Guess there are some 2020 data. Omit them
df_bat_decade <- df_bat %>%
filter(yearID >= 2010 & yearID < 2020)
## BattingPost Dataset ##
head(df_postbat) #postseason batting stats are separated by each round
summary(df_postbat$yearID)
df_postbat_decade <- df_postbat %>%
filter(yearID >= 2010 & yearID < 2020)
## Fielding Dataset ##
head(df_field)
summary(df_field$yearID) #1871 to 2020
df_field_decade <- df_field %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, POS, G, GS, InnOuts, PO, A, E, DP)
## Pitching Dataset ##
head(df_pitch)
summary(df_pitch$yearID) #1871 to 2020
df_pitch_decade <- df_pitch %>%
filter(yearID >= 2010 & yearID < 2020) %>%
select(playerID, yearID, teamID, lgID, W, L, G, GS, CG, SHO, SV, IPouts,
H, ER, HR, BB, SO, ERA, HBP, BK, BFP, R, SH, SF, GIDP)
## Pitching Dataset ##
head(df_pitch)
head(df_pitch_decade)
## Salary Dataset ##
head(df_sal)
summary(df_sal$yearID) #only from 1985 to 2016 (not sure why)
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#Since there is no 'AVG' column, need to divide H by AB
df_bat_decade$AVG = df_bat_decade$H/df_bat_decade$AB
#check out the null values
df_bat_decade %>% filter(is.na(AVG)) #no hit data.. can remove these rows.
df_bat_decade <- df_bat_decade %>% filter(!is.na(AVG))
head(df_bat_decade)
summary(df_bat_decade$AB) #Mean AB is only 162..?
summary(df_bat_decade$G) #Mean number of games: 58
head(df_bat_decade)
names(df_bat_decade)
#With standard season of 162 games, players need 502 plate appearances (PA) to qualify for the batting title
#For this dataset, let's have PA = AB + H + BB + SO + IBB + HBP + SH + SF
#Missing data: defensive interference, reaching base by error, etc. We'll work with what we have.
df_bat_decade %>%
mutate(PA = rowSums(df_bat_decade[, c(7, 9, 16, 17, 18, 19, 20, 21)]))
head(df_bat_decade)
#With standard season of 162 games, players need 502 plate appearances (PA) to qualify for the batting title
#For this dataset, let's have PA = AB + H + BB + SO + IBB + HBP + SH + SF
#Missing data: defensive interference, reaching base by error, etc. We'll work with what we have.
df_bat_decade <-
df_bat_decade %>%
mutate(PA = rowSums(df_bat_decade[, c(7, 9, 16, 17, 18, 19, 20, 21)]))
head(df_bat_decade)
summary(df_bat_decade$PA)
df_bat_decade <- df_bat %>%
filter(yearID >= 2010 & yearID < 2020)
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#Since there is no 'AVG' column, need to divide H by AB
df_bat_decade$AVG = df_bat_decade$H/df_bat_decade$AB
#check out the null values
df_bat_decade %>% filter(is.na(AVG)) #no hit data.. can remove these rows.
df_bat_decade <- df_bat_decade %>% filter(!is.na(AVG))
head(df_bat_decade)
summary(df_bat_decade$AB) #Mean AB is only 162
summary(df_bat_decade$G) #Mean number of games: 58
names(df_bat_decade)
#With standard season of 162 games, players need 502 plate appearances (PA) to qualify for the batting title
#For this dataset, let's have PA = AB + BB + IBB + HBP + SH + SF
#Missing data: defensive interference, reaching base by error, etc. We'll work with what we have.
df_bat_decade2 <-
df_bat_decade %>%
mutate(PA = rowSums(df_bat_decade[, c(7, 16, 18, 19, 20, 21)]))
summary(df_bat_decade2$PA) #mean plate appearance: 260, 3rd quartile 447, max 1113
head(df_bat_decade2)
df_bat_decade2 %>% filter(PA>=502)
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#Since there is no 'AVG' column, need to divide H by AB
df_bat_decade$AVG = round(df_bat_decade$H/df_bat_decade$AB, 3)
# 1. Best Batting Avg Holders from 2010 to 2019
head(df_bat_decade)
#check out the null values
df_bat_decade %>% filter(is.na(AVG)) #no hit data.. can remove these rows.
df_bat_decade <- df_bat_decade %>% filter(!is.na(AVG))
head(df_bat_decade)
summary(df_bat_decade$AB) #Mean AB is only 162
summary(df_bat_decade$G) #Mean number of games: 58
#With standard season of 162 games, players need 502 plate appearances (PA) to qualify for the batting title
#For this dataset, let's have PA = AB + BB + IBB + HBP + SH + SF
#Missing data: defensive interference, reaching base by error, etc. We'll work with what we have.
df_bat_decade2 <-
df_bat_decade %>%
mutate(PA = rowSums(df_bat_decade[, c(7, 16, 18, 19, 20, 21)]))
summary(df_bat_decade2$PA) #mean plate appearance: 182, 3rd quartile 313, max 754
df_bat_decade2 %>% filter(PA>=502) #only 1360 players over 10 years?
#Get the highest batting AVG holder for each season
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID)
#Get the highest batting AVG holder for each season
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
#Get the highest batting AVG holder for each season
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(playerID, yearID) %>%
summarise(HighestBattingAVG = max(AVG))
#Get the highest batting AVG holder for each season
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
#Get the highest batting AVG holder for each season
head(df_bat_decade2)
df_bat_decade2 %>%
select(playerID, yearID, AVG) %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
df_bat_decade2 %>%
select(playerID, yearID, PA) %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
df_bat_decade2 %>%
select(playerID, yearID, AVG, PA) %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG = max(AVG)) %>%
arrange(playerID)
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(playerID, yearID) %>%
summarise(HighestBattingAVG == max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(HighestBattingAVG == max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(BestAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(playerID, yearID) %>%
summarise(BestAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(BestAVG = max(AVG))
df_bat_decade2 %>%
select(playerID)
df_bat_decade2 %>%
select(playerID) %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(BestAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
summarise(BestAVG = max(AVG))
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
top_n(1, AVG)
BattingChamps <-
df_bat_decade2 %>%
filter(PA>=502) %>%
group_by(yearID) %>%
top_n(1, AVG)
#Most recently: Tim Anderson (2019), Mookie Betts (2018), and Jose Altuve (2017 da major cheating season ^^)
BattingChamps
